(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{75:function(e,t,n){"use strict";n.r(t),n.d(t,"render",(function(){return a}));var c=n(14),r=n(0),i=function(e,t,n,c){var r,i=arguments.length,s=i<3?t:null===c?c=Object.getOwnPropertyDescriptor(t,n):c;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,c);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(t,n,s):r(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},s=function(e,t,n,c){return new(n||(n=Promise))((function(r,i){function s(e){try{u(c.next(e))}catch(e){i(e)}}function o(e){try{u(c.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}u((c=c.apply(e,t||[])).next())}))};const o=[[[4]],[[7]],[[10,11]],[[13]]];let u=class extends c.a{renderMain(){this.step===this.steps&&requestAnimationFrame(()=>this.CodeRunner.run());const e=o[this.step-1];return r.e`
            <mdc-grid-cell span="12">
                <p>A Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.</p>
            <cwc-code-highlight src="./examples/rxjs/subject.ts" .highlight="${e}"></cwc-code-highlight>
            <cwc-code-runner .execute="${this.runCode.bind(this)}"></cwc-code-runner>
            </mdc-grid-cell>
        `}runCode(){return s(this,void 0,void 0,(function*(){const e=yield Promise.all([n.e(0),n.e(8)]).then(n.bind(null,68));yield e.default()}))}};i([Object(r.h)("cwc-code-runner")],u.prototype,"CodeRunner",void 0),u=i([Object(r.c)("cwc-learn-page-code-rxjs-subject")],u);const a=r.e`<cwc-learn-page-code-rxjs-subject header="RxJS subject" steps="${o.length+1}"></cwc-learn-page-code-rxjs-subject>`;t.default=a}}]);